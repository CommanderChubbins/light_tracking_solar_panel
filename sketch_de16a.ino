#include <Servo.h>

#define SENSOR_MIN 0
#define SENSOR_MAX 1023
#define RANGE_COUNT 4

// max, angle 
int difftoangle[RANGE_COUNT][2] = {
  {10, 0},
  {50, 1},
  {80, 2},
  {1024, 5}
};

int centeringpin = 7;

Servo servo0;
int servopin = 3;

int resistor = 500;

float energytotal_mJ = 0;

/* ----------------------------------------------------------------------------
 * Calculate power generated by the panel, using the voltage, and a known load
 * resistance
 * 
 * Average sensor reading 100 times for better accuracy. Power is in milliwatts
 * because the panel generates power in the order of a few milliwatts.
 * 
 * params: none
 * 
 * return: power (mW)
 */
float power_calc(void)
{
  long accum = 0;
  for (int i = 0; i < 100; ++i)
  {
    accum += analogRead(A2);
    delay(1);
  }
  accum /= 100;

  float volts = ((float) accum * 5.0) / 1024.0;
  
  float power_W = (volts * volts) / (float) resistor;
  return power_W * 1000;
}

/* ----------------------------------------------------------------------------
 * Calculate total energy generated since start
 * 
 * Energy is in millijoules because power is in milliwatts. Time is converted
 * from milliseconds to seconds.
 * 
 * params: instantaneous power (mW) 
 * 
 * return: total energy (mJ)
 */
float energy_calc(float power_mW)
{
  static long t_previous = 0;
  long t_now = millis();
  
  energytotal_mJ += power_mW * (float)(t_now - t_previous) / 1000.0;
  t_previous = t_now;
  return energytotal_mJ;
}


/* ----------------------------------------------------------------------------
 * Read the value of the light sensors  
 * 
 * Averages sensor readings every 100ms, 5 times. This increases measurement
 * accuracy and reduces margin of error. Returns the difference between the 
 * sensors.
 * 
 * params: none
 * 
 * return: difference in average sensor readings
 */
int sensor_read(void)
{
  int sensor0_avg = 0;
  int sensor1_avg = 0;

  for (int i = 0; i < 5; ++i)
  {
    sensor0_avg += analogRead(A0);
    sensor1_avg += analogRead(A1);
    delay(100);
  }
  sensor0_avg /= 5;
  sensor1_avg /= 5;

  return sensor1_avg - sensor0_avg;
}

/* ----------------------------------------------------------------------------
 * Look up the angle to move the motor, based on the difference in sensor
 * readings
 * 
 * params: none
 * 
 * return: change in angle
 */ 
int get_angle(void)
{
  int diff = sensor_read();
  
  // search table for angle based on difference 
  for (int i = 0; i < RANGE_COUNT; ++i)
  {
    // greater than maximum difference for an angle 
    if (abs(diff) > difftoangle[i][0])
    {
      // wrong pair
      continue;
    }
    else
    {
      // right pair
      int angle = difftoangle[i][1];
      return (diff < 0 ? angle : -angle);
    }
  }
}

/* ----------------------------------------------------------------------------
 * Change the angle of the servo based on the given angle
 * 
 * The motor does not move if the new angle is out of range. The motor moves in
 * increments of one degree for smoothness.
 * 
 * params: change in angle 
 * 
 * return: none
 */
void servo_move(int angle)
{
  int current = servo0.read();
  int newangle = current + angle;
  int direction = abs(angle)/angle;

  if (newangle > 15 && newangle < 165)
  {
    for (int i = 0; i < abs(angle); ++i)
    {
      servo0.write(current + direction);
      current = servo0.read();
      delay(50);
    }
  }
  return;
}


/* ----------------------------------------------------------------------------
 * Inialize serial port, servo, and i/o pins
 * 
 * params: none
 * 
 * return: none 
 */
void setup(void)
{
  Serial.begin(9600);
  servo0.attach(servopin);
  pinMode(centeringpin, INPUT);
}

/* ----------------------------------------------------------------------------
 * The main processing loop
 * 
 * params: none 
 * 
 * return: none
 */
void loop(void)
{
  // Serial read (unused) 
  int count = Serial.available();
  if (count)
  {
    Serial.print("recieved: ");
    Serial.println(Serial.readString());
  }

  float power_mW = power_calc();
  float energy_mJ = energy_calc(power_mW);
  Serial.print("Power (mW): ");
  Serial.print(power_mW);
  Serial.print(", Energy (mJ): ");
  Serial.print(energy_mJ);
  Serial.print(", Time since start (s): ");
  Serial.println(millis() / 1000);

  // center motor and cancel movement if switch is on 
  if (digitalRead(centeringpin))
  {
    servo0.write(90);
  }
  else if (int angle = get_angle())
  {
    servo_move(angle);
  }
  delay(500);
}
